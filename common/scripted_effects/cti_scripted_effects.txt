#All of these assume that you have checked that it is proper to call them before making the call.


apply_core_county_modifier = { # scope is a title
    if = {
        limit = {is_title_county = yes}
        if = {
            limit = {
                AND = {
                    has_game_rule = overtime_core_county_cost
                    has_game_rule = control_core_county_benefit
                }
            }
            add_county_modifier = core_county_cost_benefit_modifier
        }
        else_if = {
            limit = {
                has_game_rule = overtime_core_county_cost
            }
            add_county_modifier = core_county_cost_modifier
        }
        else_if = {
            limit = {
                has_game_rule = control_core_county_benefit
            }
            add_county_modifier = core_county_benefit_modifier
        }
    }
}

remove_core_county_modifier = { # scope is a title
    if = {
        limit = {is_title_county = yes}
        remove_all_county_modifier_instances = core_county_cost_benefit_modifier
        remove_all_county_modifier_instances = core_county_cost_modifier
        remove_all_county_modifier_instances = core_county_benefit_modifier
    }
}

initialize_core_county_modifiers = { # scope is a character
    every_core_limit_count_item = {
        remove_core_county_modifier
        apply_core_county_modifier
    }
}

set_over_core_limit_modifier = { # scope is character
    remove_all_character_modifier_instances = 1_over_core_limit_modifier
    remove_all_character_modifier_instances = 2_over_core_limit_modifier
    remove_all_character_modifier_instances = 3_over_core_limit_modifier
    remove_all_character_modifier_instances = 4_over_core_limit_modifier
    remove_all_character_modifier_instances = 5_over_core_limit_modifier
    remove_all_character_modifier_instances = 6_over_core_limit_modifier
    remove_all_character_modifier_instances = 7_over_core_limit_modifier
    remove_all_character_modifier_instances = 8_over_core_limit_modifier
    remove_all_character_modifier_instances = 9_over_core_limit_modifier
    remove_all_character_modifier_instances = 10_plus_over_core_limit_modifier
    amount_over_core_limit = {save_temorary_scope_as = _amount_over_core_limit} #hopefully stores the variable so it is not calculated every time.
    if = {
        limit = {scope:_amount_over_core_limit = 0}
        # do nothing
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 1}
        add_character_modifier = 1_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 2}
        add_character_modifier = 2_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 3}
        add_character_modifier = 3_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 4}
        add_character_modifier = 4_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 5}
        add_character_modifier = 5_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 6}
        add_character_modifier = 6_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 7}
        add_character_modifier = 7_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 8}
        add_character_modifier = 8_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit = 9}
        add_character_modifier = 9_over_core_limit_modifier
    }
    else_if = {
        limit = {scope:_amount_over_core_limit >= 10}
        add_character_modifier = 10_plus_over_core_limit_modifier
    }
}


initialize_core_count = {# scope is a character
    set_variable = {
        name = core_count
        value = core_count_from_list
    }
    set_over_core_limit_modifier
}


increment_core_count = {# scope is character
    change_variable = {
        name = core_count
        add = 1
    }
    set_over_core_limit_modifier
}

decrement_core_count = {# scope is character
    change_variable = {
        name = core_count
        subtract = 1
    }
    set_over_core_limit_modifier
}

apply_cost_and_count_of_title = { # scope is title. Additionaly expects a value and a boolean.
    if = {
        limit = {does_core_count_to_limit = yes}
        if = {
            limit = {NOT = {exists = holder.var:core_count}}
            holder = {initialize_core_count}
        }
        else_if = {
            limit = {$INCREASE$ = yes}
            holder = {increment_core_count}# Think this should apply this with scope holder
            apply_core_county_modifier # redundant check for being a county in this case. checks game rules in here.
        }
        else = {
            holder = {decrement_core_count}# Think this should apply this with scope holder
            remove_core_county_modifier# redundant check for being a county in this case. checks game rules in here.
        }
        if = {
            limit = {has_game_rule = flat_designate_core_county_cost }
            holder = {add_prestige = $COST$}
        }
    }
}

#unlike making titles no longer be core, cores should only be made by being designated. Cannot core beyond core title limit.
designate_core_title = {#scope is title
    set_title_core
    apply_cost_and_count_of_title = {
        INCREASE = yes
        COST = coring_county_cost_flat
    }
}

set_title_core = {
    set_variable = {
        name = core
        value = yes
    }
    set_always_follows_primary_heir = yes
}

de_designate_core_title = {# scope is title
    de_core_title
    apply_cost_and_count_of_title = {
        INCREASE = no
        COST = coring_county_refund_flat
    }
}

# should be able to construct list and use it in the limit for the next one.
remove_invalid_core_titles = { #scope is a character. full refund. Not meant to be called via player actions.
    send_cores_removed_toast
    every_inconsistent_core_title = { # scope should be the title here, and root the character
        de_core_title
        apply_cost_and_count_of_title = {
            INCREASE = no
            COST = coring_county_refund_flat_full
        }
    }
    if = {
        limit = {any_core_title = {is_core_consistent = no}}
        remove_invalid_core_titles # recursive. Can run into problems if core titles from other sources are labeled incosistent.
    }
}

de_core_title = { # scope is a title.
    if = {
        limit = {exists = var:core}
        set_variable = {
            name = core
            value = no
        }
        set_always_follows_primary_heir = no
    }
}

recalculate_cores = { # scope is a character. this is used in cases like inheritance when core titles are preserved
    initialize_core_count
    initialize_core_county_modifiers
    if = {
        limit = {any_core_title_item = {is_core_consistent = no}}
        remove_invalid_core_titles
    }
}

# Should never be needed
#remove_all_core_titles = {# scope is character. full refund. this should be used if something brings one over core limit - currently ther is no penalty for being over.
#    save_temporary_scope_as = this_character
#    every_core_title_item = {
#        if = {
#            limit = {can_de_core_title}
#            decore_title
#            apply_cost_and_count_of_title = {
#                INCREASE = no
#                COST = coring_title_refund_flat_full
#            }
#        }
#    }
#}

de_designate_all_core_titles = { #scope is character. Not full refund. should be called by character.
    every_core_title_item = {
        de_core_title
        apply_cost_and_count_of_title = {
            INCREASE = no
            COST = coring_county_refund_flat
        }
    }
}

# looking for the senario where a core is created in between two existing cores.
check_auto_core_title = { # scope is title. Assumes that only  one title is being created at once. Used for when titles are created.
    assert_if = {
        limit = {tier = tier_county}
        text = "check_auto_core_title: County title passed. They should never be created, and that is currently the only entry point."
    }
    if = {
        limit = {
            AND = {
                tier > tier_county
                de_facto_liege = {
                    And = {
                        holder = root.holder
                        is_title_core = yes
                    }
                }
                any_in_de_facto_hierarchy = {
                    continue = {
                        AND = {
                            holder = root.holder
                            de_facto_liege = root
                        }
                    }
                    is_core_title = yes
                }
            }
        }
        set_title_core
        apply_cost_and_count_of_title = { # should never have an effect, but putting it here for consistency.
            INCREASE = yes
            COST = coring_county_cost_flat
        }
    }
}

send_cores_removed_toast = { # scope should not be needed. Possibly change scope to title, and inform which titles are removed.
    send_interface_toast = {
        type = event_toast_text_bad # possibly change to msg_title_rank_down
        title = cores_titles_removed_toast_title
        desc = cores_titles_removed_toast_desc
    }
}