# All scopes are titles unless otherwise noted.

is_title_de_jure_above_capital = { # scope is title
    custom_description = {
        text = "TITLE_DE_JURE_ABOVE_CAPITAL_TRIGGER"
        trigger_if = {
            limit = {exists = holder}
            OR = {
                holder.capital_county = this # capital county
                is_de_jure_liege_or_above_target = holder.capital_county
            }
        }
        trigger_else = {
            always = no
        }
    }
}

is_title_core_due_to_capital = { # scope is title
    is_title_de_jure_above_capital = yes
    tier < holder.highest_held_title_tier # not the same tier as the primary title
}

is_title_special_core = { # Incomplete until I can see the always_follows_primary_heir tag
    always = no # head of faith was in this category, but it fits better in the category of having a title law that just happens to be always going to the primary heir.
}

has_any_title_law = { # scope is title (technically this means has a different title succession law than the realm succession law).
    custom_description = {
        text = "HAS_ANY_TITLE_LAW_TRIGGER"
        tier >= tier_duchy
        OR = {
            is_head_of_faith = yes
            has_title_law_flag = elective_succession_law
            NOT = {
                trigger_if = {
                    limit = {has_title_law = male_only_law}
                    holder = {has_realm_law = male_only_law}
                }
                trigger_else_if = {
                    limit = {has_title_law = male_preference_law}
                    holder = {has_realm_law = male_preference_law}
                }
                trigger_else_if = {
                    limit = {has_title_law = equal_law}
                    holder = {has_realm_law = equal_law}
                }
                trigger_else_if = {
                    limit = {has_title_law = female_preference_law}
                    holder = {has_realm_law = female_only_law}
                }
                trigger_else = {
                    always = yes
                }
            }   
        }
    }
}

is_title_ineligible_due_to_title_law  = { # scope is title
    save_temporary_scope_as = t_title
    custom_description = {
        text = "TITLE_INELIGIBLE_DUE_TO_TITLE_LAW_TRIGGER"
        OR = {
            AND = { # title is primary going to different dynasty
                holder.primary_title = this # is primary
                NOT = {current_heir.dynasty = holder.dynasty} #title heir is of different dynasty # have to investigate what this does with lowborn characters.
            }
            any_this_title_or_de_jure_above = {
                trigger_if = { # should be an implied and
                    limit = {exists = holder}
                    holder = {has_title = scope:t_title} # held by owner
                    has_any_title_law = yes # title has a title law
                    OR = {
                        NOT = {holder.primary_title = this} # this title is not the primary title
                        AND = { # title is primary going to different dynasty and with peer title.
                            holder.primary_title = this # is primary
                            NOT = {current_heir.dynasty = holder.dynasty} #title heir is of different dynasty # have to investigate what this does with lowborn characters.
                            holder = { # other title of same tier as primary
                                any_held_title = {
                                    tier = holder.primary_title.tier
                                    NOT = {holder.primary_title = this}
                                }
                            }
                        }
                    }
                }
                trigger_else = {
                    always = no
                }
            }
        }
    }
}

is_title_core_due_to_not_cti = {# scope is title
    tier >= tier_county
    is_title_ineligible_due_to_title_law = no
    OR = {
        is_title_core_due_to_capital = yes
        holder.primary_title = this
        is_title_special_core = yes
    }
}

is_title_core = { # Assume that this will only be called if the title is owned
    OR = {
        AND = { # can't move this out to is_core_due_to_cti because there is overlap between the two statements.
            has_variable = core
            tier >= tier_county
            var:core = yes
        }
        is_core_due_to_not_cti = yes
    }
}

is_core_due_to_cti = {
    has_variable = core # This condition means that it is technically possible (though it should never happen) that a title is considered neither core due to cti or core due to not cti.
    is_core_due_to_not_cti = no
}

is_title_county = {
    tier = tier_county
}

#######################################################################################
######################## End of "Primative" triggers ##################################
#######################################################################################

is_a_child_title_chain_core = {# scope is title. assumes that rules are being followed up to this point.
    custom_description = {
        text = CHILD_CHAIN_EXISTS
        save_temporary_scope_as = _title
        holder = {# Changes scope to holder
            any_held_title = {
                is_title_core = yes
                NOT = {this = $EXCLUDED$} # excludes this title from consideration (used for checking breaking chains or adding cores)
                target_is_de_jure_liege_or_above = scope:_title # de_jure_child of this title. Assume that this disqualifies the title I am calling this on.

                NOT = { # need to make sure condition is true for every, so looking for one thing which does not meet it.
                    any_this_title_or_de_jure_above = {
                        trigger_if = {
                            limit = {exists = holder} # limits to titles which exist.
                            # nothing in chain is owned by holder (which implies it exists) but is not core.
                            # will break if there is a title which is held by holder, but is not core between two titles.
                            holder = {has_title = scope:_title} # held by owner.
                            tier < scope:_title.tier #in chain between two titles <- because title itself is presumably in heirarchy
                            OR = {
                                this = $EXCLUDED$ # for the purposes of this function, excluded is not core.
                                is_title_core = no # not core
                            }
                        }
                        trigger_else = {
                            always = no
                        }
                    }
                }
            }
        }
    }
}

is_title_eligible_for_core = { # Assume that this will only be called if the title is owned
    is_title_core = no # not a core title - will rule out core titles due to non-cti.
    is_title_ineligible_due_to_title_law = no
}

# just checks "one up" so it assumes the rules are followed up to this point.
# does not actually check that this title is a core.
will_core_loss_break_chain = { # scope is title
    custom_description = {
        text = "CORE_LOSS_BREAK_CHAIN_TRIGGER"
        # is_title_county = yes This would probably make things more efficient by short-circuiting, but will not use as I am not confident I have not forgotten an edge case.
        save_temporary_scope_as = w_title# count in comments will assume that this title is a county
        trigger_if ={# duchy
            limit = {
                de_jure_liege.tier <= holder.highest_held_title_tier
                holder = {has_title = scope:w_title.de_jure_liege}
            }
            de_jure_liege = {
                is_title_core = yes
                is_title_core_due_to_cti = yes
            }
            NOT = {de_jure_liege = {is_a_child_title_chain_core = {EXCLUDED = scope:w_title}}}
        }
        trigger_else_if = {# kingdom
            limit = {
                de_jure_liege.de_jure_liege.tier <= holder.highest_held_title_tier
                holder = {has_title = scope:w_title.de_jure_liege.de_jure_liege}
            }
            de_jure_liege.de_jure_liege = {
                is_title_core = yes
                is_title_core_due_to_cti = yes
            }
            NOT = {de_jure_liege.de_jure_liege = {is_a_child_title_chain_core = {EXCLUDED = scope:w_title}}}
        }
        trigger_else_if = {# empire
            limit = {
                de_jure_liege.de_jure_liege.de_jure_liege.tier <= holder.highest_held_title_tier
                holder = {has_title = scope:w_title.de_jure_liege.de_jure_liege.de_jure_liege}
            }
            de_jure_liege.de_jure_liege.de_jure_liege = {
                is_title_core = yes
                is_title_core_due_to_cti = yes
            }
            NOT = {de_jure_liege.de_jure_liege.de_jure_liege = {is_a_child_title_chain_core = {EXCLUDED = scope:w_title}}}
        }
        trigger_else = {
            always = no
        }
    }
}

is_core_consistent = {# scope is title
    is_title_ineligible_due_to_title_law = no
}

# just checks one title (not tier) up.
is_de_jure_liege_core = {
    custom_description = {
        text = "IS_DE_JURE_LIEGE_CORE_TRIGGER"
        save_temporary_scope_as = d_title# label in comments will assume that this title is a county
        trigger_if ={# duchy
            limit = {holder = {has_title = scope:d_title.de_jure_liege}}
            de_jure_liege = {is_title_core = yes}
        }
        trigger_else_if = {# kingdom
            limit = {holder = {has_title = scope:d_title.de_jure_liege.de_jure_liege}}
            de_jure_liege.de_jure_liege = {is_title_core = yes}
        }
        trigger_else_if = {# empire
            limit = {holder = {has_title = scope:d_title.de_jure_liege.de_jure_liege.de_jure_liege}}
            de_jure_liege.de_jure_liege.de_jure_liege = {is_title_core = yes}
        }
        trigger_else = {
            always = yes
        }
    }    
}

is_core_de_jure_liege_consistent = { # scope is title # this does not check if this core is consistent. # need to check titles de-jure above by my def (allowing skipping levels.)
    OR = {
        # cores due to reasons other than the mod do not need their de-jure liege to be a core.
        is_core_due_to_not_cti = yes
        is_de_jure_liege_core = yes
    }
}

has_child_core_excluding = {
    save_temporary_scope_as = l_title
    any_in_de_jure_hierarchy = {
        continue = {tier > tier_county} # hope this causes it to iterate through everything except baronies.
        NOT = {this = scope:l_title}
        NOT = {$EXCLUDED$ = this}
        holder = {has_title = scope:l_title}
        is_title_core = yes
    }
}

has_child_core = {
    save_temporary_scope_as = l_title
    has_child_core_excluding = {EXCLUDED = scope:l_title}# Will techinally double up on ignoring this title, but want code to only be in one place.
}

is_core_leaf_excluding = { # scope is title # also works with non-cores to check if they have core descendants
    NOT = {has_child_core_excluding = {EXCLUDED = $EXCLUDED$}}
}

is_core_leaf = { # scope is title # also works with non-cores to check if they have core descendants
    save_temporary_scope_as = l_title
    is_core_leaf_excluding = {EXCLUDED = scope:l_title}# Will techinally double up on ignoring this title, but want code to only be in one place.
}

is_ancestor_leaf = { # scope is a title
    save_temporary_scope_as = a_title
    any_this_title_or_de_jure_above = {
        holder = {has_title = scope:a_title}
        is_title_core = yes
        is_core_leaf = yes
    }
}

is_ancestor_leaf_excluding_self = { # scope is a title
    save_temporary_scope_as = a_title
    any_this_title_or_de_jure_above = {
        holder = {has_title = scope:a_title}
        is_title_core = yes
        is_core_leaf_excluding = {EXCLUDED = scope:a_title}
    }
}

does_core_have_cost = { # scope is title
    # is_titular = no # titular titles will have a cost.
    is_core_due_to_cti = yes
    is_core_leaf = yes
}

does_core_have_cost_excluding = { # scope is title
    # is_titular = no # titular titles will have a cost.
    is_core_due_to_cti = yes
    is_core_leaf_excluding = {EXCLUDED = $EXCLUDED$}
}

does_ancestor_have_cost = {
    save_temporary_scope_as = a_title
    any_this_title_or_de_jure_above = {
        holder = {has_title = scope:a_title}
        is_title_core = yes
        does_core_have_cost = yes
    }
}

does_ancestor_have_cost_excluding_self = {
    save_temporary_scope_as = a_title
    any_this_title_or_de_jure_above = {
        holder = {has_title = scope:a_title}
        is_title_core = yes
        does_core_have_cost_excluding = {EXCLUDED = scope:a_title}
    }
}

does_core_count_to_limit = { # scope is title
    #is_core_due_to_cti = yes # will count capital and primary title to core limit unless they are titular
    # is_titular = no # will count titular titles to core limit.
    is_core_leaf = yes
}

will_coring_have_cost = { # scope is title # can be called before or after title is cored.
    does_ancestor_have_cost_excluding_self = no
}

will_de_coring_give_refund = {
    custom_description = {
        text = "CORE_REFUND_TRIGGER"
        NOT = {
            save_temporary_scope_as = r_title# label in comments will assume that this title is a county
            trigger_if ={# duchy
                limit = {holder = {has_title = scope:d_title.de_jure_liege}}
                de_jure_liege = {is_core_leaf_excluding = {EXCLUDED = scope:r_title}}
            }
            trigger_else_if = {# kingdom
                limit = {holder = {has_title = scope:d_title.de_jure_liege.de_jure_liege}}
                de_jure_liege.de_jure_liege = {is_core_leaf_excluding = {EXCLUDED = scope:r_title}}
            }
            trigger_else_if = {# empire
                limit = {holder = {has_title = scope:d_title.de_jure_liege.de_jure_liege.de_jure_liege}}
                de_jure_liege.de_jure_liege.de_jure_liege = {is_core_leaf_excluding = {EXCLUDED = scope:r_title}}
            }
            trigger_else = {
                always = no
            }
        }
    }
}

is_over_core_limit = { # scope is character
    core_count > val_core_limit
}

# Different from the trigger contained within in case one wants to add a character restriction on coring titles. There used to be one that characters were not allowed to go over their core limit.
can_core_title = {
    is_title_eligible_for_core = yes
}

can_de_core_title = {
    is_title_core = yes
    is_core_due_to_cti = yes
    is_core_leaf = yes
}

has_core_titles = { # scope is character
    any_held_title = {
        is_title_core = yes
    }
}

