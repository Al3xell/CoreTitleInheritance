#All of these assume that you have checked that it is proper to call them before making the call.


apply_core_county_modifier = { # scope is a title
    if = {
        limit = {is_title_county = yes}
        # if = {
            # limit = {
                # has_game_rule = overtime_core_county_cost
                # has_game_rule = control_core_county_benefit
            # }
            # add_county_modifier = core_county_cost_benefit_modifier
        # }
        # else_if = {
            # limit = {
                # has_game_rule = overtime_core_county_cost
            # }
            # add_county_modifier = core_county_cost_modifier
        # }
        # else_
        if = {
            limit = {
                has_game_rule = control_core_county_benefit
            }
            add_county_modifier = core_county_benefit_modifier
        }
    }
}

remove_core_county_modifier = { # scope is a title
    if = {
        limit = {is_title_county = yes}
        #remove_all_county_modifier_instances = core_county_cost_benefit_modifier
        #remove_all_county_modifier_instances = core_county_cost_modifier
        remove_all_county_modifier_instances = core_county_benefit_modifier
    }
}

# initialize_core_county_modifiers = { # scope is a character
    # every_core_title_item = {
        # limit = {does_core_count_to_limit = yes}
        # remove_core_county_modifier = yes
        # apply_core_county_modifier = yes
    # }
# }

set_over_core_limit_modifier = { # scope is character
    hidden_effect = {
        remove_all_character_modifier_instances = 1_over_core_limit_modifier
        remove_all_character_modifier_instances = 2_over_core_limit_modifier
        remove_all_character_modifier_instances = 3_over_core_limit_modifier
        remove_all_character_modifier_instances = 4_over_core_limit_modifier
        remove_all_character_modifier_instances = 5_over_core_limit_modifier
        remove_all_character_modifier_instances = 6_over_core_limit_modifier
        remove_all_character_modifier_instances = 7_over_core_limit_modifier
        remove_all_character_modifier_instances = 8_over_core_limit_modifier
        remove_all_character_modifier_instances = 9_over_core_limit_modifier
        remove_all_character_modifier_instances = 10_plus_over_core_limit_modifier
        # set_variable = {
            # name = _amount_over_core_limit
            # value = amount_over_core_limit
        # } #hopefully stores the variable so it is not calculated every time.
        #^this was not working. changing to calculate everytime. inefficient.
        if = {
            limit = {amount_over_core_limit = 0}
            # do nothing
        }
        else_if = {
            limit = {amount_over_core_limit = 1}
            add_character_modifier = 1_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 2}
            add_character_modifier = 2_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 3}
            add_character_modifier = 3_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 4}
            add_character_modifier = 4_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 5}
            add_character_modifier = 5_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 6}
            add_character_modifier = 6_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 7}
            add_character_modifier = 7_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 8}
            add_character_modifier = 8_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 9}
            add_character_modifier = 9_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit >= 10}
            add_character_modifier = 10_plus_over_core_limit_modifier
        }
        #remove_variable = _amount_over_core_limit
    }
}

initialize_cores = {# scope is a character
    save_temporary_scope_as = _character
    every_held_title = {
        if = {
            limit = {is_title_county = yes}
            remove_core_county_modifier = yes
        }
        if = {
            limit = {
                is_title_core = yes
                does_core_count_to_limit = yes
            }
            apply_core_county_modifier = yes
        }
    }
    set_over_core_limit_modifier = yes
    set_variable = {
        name = _num_core_counties
        value = core_count
    }
    set_variable = {
        name = _num_over_core_limit
        value = amount_over_core_limit
    }
    set_variable = {
        name = _num_core_titles
        value = val_core_titles
    }
}

core_change_effect = { # scope is title. Additionaly expects a value and a boolean.
    if = {
        limit = {does_core_count_to_limit = yes}
        if = {
            limit = {always = $INCREASE$}
            apply_core_county_modifier = yes
        }
        else = {
            remove_core_county_modifier = yes
        }
        holder = {
            set_over_core_limit_modifier = yes
            if = {
                limit = {has_game_rule = flat_designate_core_county_cost}
                add_prestige_no_experience = $COST$
            }
        }
    }
    holder = {
        set_variable = {
            name = _num_core_counties
            value = core_count
        }
        set_variable = {
            name = _num_over_core_limit
            value = amount_over_core_limit
        }
        set_variable = {
            name = _num_core_titles
            value = val_core_titles
        }
    }
}

set_title_core = {
    custom_tooltip = "CORE_TITLE_EFFECT"
    set_variable = {
        name = core
        value = yes
    }
    set_always_follows_primary_heir = yes
    core_change_effect = {
        INCREASE = yes
        COST = $COST$
    }
}

de_core_title = { # scope is a title.
    if = {
        custom_tooltip = "DE_CORE_TITLE_EFFECT"
        limit = {has_variable = core}
        set_variable = {
            name = core
            value = no
        }
        set_always_follows_primary_heir = no
        core_change_effect = {
            INCREASE = no
            COST = $COST$
        }
    }
}

#unlike making titles no longer be core, cores should only be made by being designated. Cannot core beyond core title limit.
designate_core_title = { #scope is title
    set_title_core = {COST = coring_county_cost_flat}
}

de_designate_core_title = {# scope is title, should only be called when it is appropriate/possible.
    de_core_title = {COST = coring_county_refund_flat}
}

# should be able to construct list and use it in the limit for the next one.
# should only be called when there are titles to remove.
remove_invalid_core_titles = { #scope is a character. full refund. Not meant to be called via player actions.
    send_cores_removed_toast = yes
    while = {
        count = 4 # Should need to run no more than 3 times. Adding in extra run incase my thought process is off.
        #limit = {any_core_title_item = {is_core_consistent = no}} Commenting out, should make this more efficient.
        every_held_title = {
            if = {
                limit = {
                    is_title_core = yes
                    is_core_consistent = no
                }
                de_core_title = {COST = coring_county_refund_flat_full} # inconsistent restricts all cores to being cti cores
            }
        }
    }
}

recalculate_cores = { # scope is a character. this is used in cases like inheritance when core titles are preserved
    initialize_cores = yes
    if = {
        limit = {
            any_held_title = {
                is_title_core = yes
                is_core_consistent = no
            }
        }
        remove_invalid_core_titles = yes
    }
}

de_designate_all_core_titles = { #scope is character. Not full refund. should be called by character.
    every_held_title = {
        if = {
            limit = {
                is_title_core = yes
                is_title_core_due_to_cti = yes
            }
            de_designate_core_title = yes
        }
    }
}

# looking for the senario where a core is created in between two existing cores.
check_auto_core_title = { # scope is title. Assumes that only  one title is being created at once. Used for when titles are created.
    assert_if = {
        limit = {tier = tier_county}
        text = "check_auto_core_title: County title passed. They should never be created, and that is currently the only entry point."
    }
    save_temporary_scope_as = _title
    if = {
        limit = {
            tier > tier_county
            is_title_core_due_to_not_cti = no
            will_core_loss_break_chain = yes
        }
        set_title_core = {COST = coring_county_cost_flat}
    }
}

send_cores_removed_toast = { # scope should not be needed. Possibly change scope to title, and inform which titles are removed.
    send_interface_toast = {
        type = event_toast_text_bad # possibly change to msg_title_rank_down
        title = cores_titles_removed_toast_title
        desc = cores_titles_removed_toast_desc
    }
}