apply_core_county_modifier = { # scope is a title
    if = {
        limit = {is_title_county = yes}
        #Leaving in this code in case it can be used in the future.
        # if = {
            # limit = {
                # has_game_rule = overtime_core_county_cost
                # has_game_rule = control_core_county_benefit
            # }
            # add_county_modifier = core_county_cost_benefit_modifier
        # }
        # else_if = {
            # limit = {
                # has_game_rule = overtime_core_county_cost
            # }
            # add_county_modifier = core_county_cost_modifier
        # }
        # else_
        if = {
            limit = {
                has_game_rule = control_core_county_benefit
            }
            add_county_modifier = core_county_benefit_modifier
        }
    }
}

remove_core_county_modifier = { # scope is a title
    if = {
        limit = {is_title_county = yes}
        #Leaving this code in in case it can be used in the future
        #remove_all_county_modifier_instances = core_county_cost_benefit_modifier
        #remove_all_county_modifier_instances = core_county_cost_modifier
        remove_all_county_modifier_instances = core_county_benefit_modifier
    }
}

set_core_cost_modifier = {
    if = {
        limit = {has_game_rule = overtime_core_county_cost}
        remove_all_character_modifier_instances = core_cost_modifier
        every_held_title = {
            limit = {
                is_title_core = yes
                does_core_have_cost = yes
            }
            holder = {add_character_modifier = core_cost_modifier}
        }
    }
}

set_over_core_limit_modifier = { # scope is character
    hidden_effect = {
        remove_all_character_modifier_instances = 1_over_core_limit_modifier
        remove_all_character_modifier_instances = 2_over_core_limit_modifier
        remove_all_character_modifier_instances = 3_over_core_limit_modifier
        remove_all_character_modifier_instances = 4_over_core_limit_modifier
        remove_all_character_modifier_instances = 5_over_core_limit_modifier
        remove_all_character_modifier_instances = 6_over_core_limit_modifier
        remove_all_character_modifier_instances = 7_over_core_limit_modifier
        remove_all_character_modifier_instances = 8_over_core_limit_modifier
        remove_all_character_modifier_instances = 9_over_core_limit_modifier
        remove_all_character_modifier_instances = 10_plus_over_core_limit_modifier
        if = {
            limit = {amount_over_core_limit = 0}
            # do nothing
        }
        else_if = {
            limit = {amount_over_core_limit = 1}
            add_character_modifier = 1_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 2}
            add_character_modifier = 2_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 3}
            add_character_modifier = 3_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 4}
            add_character_modifier = 4_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 5}
            add_character_modifier = 5_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 6}
            add_character_modifier = 6_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 7}
            add_character_modifier = 7_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 8}
            add_character_modifier = 8_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit = 9}
            add_character_modifier = 9_over_core_limit_modifier
        }
        else_if = {
            limit = {amount_over_core_limit >= 10}
            add_character_modifier = 10_plus_over_core_limit_modifier
        }
    }
}

initialize_cores = {# scope is a character
    save_temporary_scope_as = _character
    every_held_title = {
        if = {
            limit = {is_title_county = yes}
            remove_core_county_modifier = yes
        }
        if = {
            limit = {
                is_title_core = yes
                is_title_county = yes
            }
            apply_core_county_modifier = yes
        }
    }
    set_over_core_limit_modifier = yes
    set_core_cost_modifier = yes
    set_variable = {
        name = _num_core_counties
        value = core_count
    }
    set_variable = {
        name = _num_over_core_limit
        value = amount_over_core_limit
    }
    set_variable = {
        name = _num_core_titles
        value = val_core_titles
    }
}

core_change_effect = { # scope is title. Additionaly expects a value and a boolean. should be called after batch of cores is done if cores are batched.
    if = {
        limit = {is_title_county = yes}
        if = {
            limit = {always = $INCREASE$}
            apply_core_county_modifier = yes
        }
        else = {
            remove_core_county_modifier = yes
        }
        holder = {
            set_over_core_limit_modifier = yes
            if = {
                limit = {has_game_rule = flat_designate_core_county_cost}
                add_prestige_no_experience = $COST$
            }
        }
    }
    if = {
        limit = {
            does_core_count_to_limit = yes 
        }
        holder = {
            set_over_core_limit_modifier = yes
        }
    }

    holder = {
        set_variable = {
            name = _num_core_counties
            value = core_count
        }
        set_variable = {
            name = _num_over_core_limit
            value = amount_over_core_limit
        }
        set_variable = {
            name = _num_core_titles
            value = val_core_titles
        }
    }
}

set_title_core = {
    custom_tooltip = "CORE_TITLE_EFFECT"
    set_variable = {
        name = core
        value = yes
    }
    set_always_follows_primary_heir = yes
}

de_core_title = { # scope is a title.
    if = {
        custom_tooltip = "DE_CORE_TITLE_EFFECT"
        limit = {has_variable = core} # Only meant to be called on titles touched by cti.
        set_variable = {
            name = core
            value = no
        }
        set_always_follows_primary_heir = no
    }
}

designate_core_title = { #scope is title
    set_title_core = yes
    core_change_effect = {
        INCREASE = yes
        COST = coring_county_cost_flat
    }
}

de_designate_core_title = {# scope is title. Should not be called on non-core titles
    de_core_title = yes
    core_change_effect = {
        INCREASE = no
        COST = coring_county_refund_flat
    }
}

remove_invalid_core_titles = { #scope is a character. full refund. Not meant to be called via player actions. should only be called when inconsistent titles are detected.
    send_cores_removed_toast = yes
    every_held_title = {
        if = {
            limit = {
                is_title_core = yes
                is_core_consistent = no
            }
            de_core_title = yes # inconsistent restricts all cores to being cti cores
            core_change_effect = {
                INCREASE = no
                COST = coring_county_refund_flat_full
            }
        }
    }
}

recalculate_cores = { # scope is a character.
    initialize_cores = yes
    if = {
        limit = {
            any_held_title = {
                is_title_core = yes
                is_core_consistent = no
            }
        }
        remove_invalid_core_titles = yes
    }
}

de_designate_all_core_titles = { #scope is character. Not full refund. Should be called by character.
    every_held_title = {
        if = {
            limit = {
                is_title_core = yes
                is_title_core_due_to_cti = yes
            }
            de_designate_core_title = yes
        }
    }
}

core_parent_titles = { # scope is title. Should only be called on a core title.
    no = {save_temporary_scope_as = hit_core}
    save_temporary_scope_as = p_title
    ordered_this_title_or_de_jure_above = {
        limit = {
            scope:hit_core = no
            exists = holder
            holder = {has_title = scope:p_title}
        }
        order_by = { # order from lowest tier up
            value = 0
            subtract = tier
        }
        if = {
            limit = {is_title_core = yes}
            yes = {save_temporary_scope_as = hit_core}
        }
        else = {
            set_title_core = yes # should never effect core limit, core costs, or be called on a county.
        }
    }
}

# looking for the senario where a core is created in between two existing cores.
check_auto_core_title = { # scope is title. Assumes that only one title is being created at once. Used for when titles are created.
    assert_if = {
        limit = {tier = tier_county}
        text = "check_auto_core_title: County title passed. They should never be created, and that is currently the only entry point."
    }
    save_temporary_scope_as = _title
    if = {
        limit = {
            tier > tier_county
            is_title_core_due_to_not_cti = no
            will_core_loss_break_chain = yes
        }
        set_title_core = yes # should never effect core limit, core costs, or be called on a county.
    }
}

send_cores_removed_toast = { # scope should not be needed. Possibly change scope to title, and inform which titles are removed.
    send_interface_toast = {
        type = event_toast_text_bad # possibly change to msg_title_rank_down
        title = cores_titles_removed_toast_title
        desc = cores_titles_removed_toast_desc
    }
}