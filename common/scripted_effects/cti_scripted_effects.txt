#All of these assume that you have checked that it is proper to call them before making the call.

initialize_core_count = {# scope is a character
    set_variable = {
        name = core_count
        value = core_count_from_list
    }
    over_core_limit_modifier # hope that this does not just apply a snapshot.
    if = {
        limit = {has_game_rule = overtime_designate_core_cost}
        core_titles_cost_modifier
    }
}


increment_core_count = {# scope is character
    if = {
    limit = {NOT = {exists = var:core_count}}
        initialize_core_count
    }
    else ={
        change_variable = {
            name = core_count
            add = 1
        }
    }
}

# assumes that core count is 
decrement_core_count = {# scope is character
    if = {
    limit = {NOT = {exists = var:core_count}}
        initialize_core_count
    }
    else: = {
        change_variable = {
            name = core_count
            subtract = 1
        }
    }
}

apply_cost_and_count_of_title = { # scope is title. Additionaly expects a value and a boolean.
    if = {
        limit = {does_core_title_have_cost}
        if = {
            limit = {$INCREASE$}
            holder.increment_core_count
        }
        else = {
            holder.decrement_core_count
        }
        if = {
            limit = {has_game_rule = flat_designate_core_cost }
            holder.add_prestige = $COST$ 
        }
    }
}

#unlike making titles no longer be core, cores should only be made by being designated. Cannot core beyond core title limit.
designate_core_title = {#scope is title
    set_variable = {
        name = core
        value = yes
    }
    set_always_follows_primary_heir = yes
    apply_cost_and_count_of_title = {
        INCREASE = yes
        COST = coring_title_cost_flat
    }   
}

de_designate_core_title = {# scope is title
    de_core_title
    apply_cost_and_count_of_title = {
        INCREASE = no
        COST = coring_title_refund_flat
    } 
}

#This should not be used to remove bad core titles on inheritance. On inheritance, core titles should not be broken (though capital chain and primary might be removed or changed)
remove_invalid_core_titles = { #scope is a character. full refund. should happen when a core title is lost if it invalidates the heirarchy
    send_cores_removed_toast
    while = {# Essentially while list is not empty
        limit = {any_core_title = {NOT = {is_core_consistent}}}# Should fix this later, it in essense calculates the list twice as often as it needs to
        every_inconsistent_core_title = { # this should be the title here, and root the character
            if = {
                limit = {can_de_core_title} # This means this can technically go into an infinite loop, but this should never happen.
                de_core_title
                apply_cost_and_count_of_title = {
                    INCREASE = no
                    COST = coring_title_refund_flat_full
                }
            }
        }
    }
}

safe_de_core_title = {
    if = {
        limit = {can_de_core_title}
        de_core_title
    }
}

de_core_title = { # scope is a title. Will still work even if title is not core.
    set_variable = {
        name = core
        value = no
    }
    set_always_follows_primary_heir = no
}

recalculate_cores = { # scope is a character. this is used in cases like inheritance when core titles are preserved
    initialize_core_count
    if = {
        limit = {any_core_title = {NOT = {is_core_consistent}}}
        remove_invalid_core_titles
    }
}

# Should never be needed
#remove_all_core_titles = {# scope is character. full refund. this should be used if something brings one over core limit - currently ther is no penalty for being over.
#    save_temporary_scope_as = this_character
#    every_core_title = {
#        if = {
#            limit = {can_de_core_title}
#            decore_title
#            apply_cost_and_count_of_title = {
#                INCREASE = no
#                COST = coring_title_refund_flat_full
#            }
#        }
#    }
#}

de_designate_all_core_titles = { #scope is character not full refund. should be called by a decision
    every_core_title = {
        if = {
            limit = {can_de_core_title}
            decore_title
            apply_cost_and_count_of_title = {
                INCREASE = no
                COST = coring_title_refund_flat
            }
        }
    }
}

send_cores_removed_toast = { # scope should not be needed
    send_interface_toast = {
        type = event_toast_text_bad # possibly change to msg_title_rank_down
        title = cores_titles_removed_toast_title
        desc = cores_titles_removed_toast_desc
    }
}